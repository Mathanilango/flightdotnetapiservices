using Bookingservice.DBContext;
using Bookingservice.Interface;
using Bookingservice.Model;
using iTextSharp.text;
using iTextSharp.text.pdf;
using System;
using System.Collections.Generic;
using System.Data;
using System.IO;
using System.Linq;
using System.Net;
using System.Threading.Tasks;

namespace Bookingservice.Repository
{
    public class SqlBookingRepository : IBooking
    {
        private readonly AppDBContext _context;
        public SqlBookingRepository(AppDBContext Context)
        {
            _context = Context;
        }

        //Book Ticket
        
        public string BookTicket(Ticket ticket, List<Passenger> pass)
        {
            string result;
            try
            {

                var res=_context.Tickets.Add(ticket);
                _context.SaveChanges();
                var tk = ticket;
                string val = tk.FlightId.ToString() + "," + tk.BookedSeats.ToString() + "," + tk.Seattype + "," + "add";
                Rabbitmqproducer rab = new Rabbitmqproducer();
                rab.rabirprd(val);
                var flt = _context.Flight.FirstOrDefault(f => f.Flightnumber == ticket.FlightId);
                var air = _context.Airline.FirstOrDefault(f => f.ID == ticket.AirlineId);
               

                foreach (var psg in pass)
                {
                    psg.Pnrno = tk.Pnrno;
                    psg.datecreated = DateTime.Now;
                    _context.passengers.Add(psg);
                    _context.SaveChanges();
                }
                string g = ticket.Dateofjourney.ToShortDateString();
                DataTable ds = new DataTable();
                ds.Columns.Add("Name");
                ds.Columns.Add("Age");
                ds.Columns.Add("Gender");
                ds.Columns.Add("Seat Class");
                ds.Columns.Add("Meal");
                ds.Columns.Add("SeatNo");
                foreach (var ps in pass)
                {
                    ds.Rows.Add(new object[] { ps.name, ps.age, ps.Gender, ps.seattype, ps.Meal, ps.Seatno });
                }

                string filename = "C://Users//cogdotnet906//Downloads//" + ticket.Pnrno+"_" + DateTime.Now.ToShortDateString()+"_"+DateTime.Now.Hour +
                    "_"+DateTime.Now.Minute+"_"+DateTime.Now.Second+".pdf";

                System.IO.MemoryStream ms = new System.IO.MemoryStream();
                iTextSharp.text.Rectangle rec = new iTextSharp.text.Rectangle(PageSize.A4);
                rec.BackgroundColor = new BaseColor(System.Drawing.Color.Olive);
                Document doc = new Document(rec); 
                doc.SetPageSize(iTextSharp.text.PageSize.A4);
                PdfWriter writer = PdfWriter.GetInstance(doc, new FileStream(filename, FileMode.Create));
                doc.Open();

                //Creating paragraph for header  
                BaseFont bfntHead = BaseFont.CreateFont(BaseFont.TIMES_ROMAN, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                iTextSharp.text.Font fntHead = new iTextSharp.text.Font(bfntHead, 16, 1, iTextSharp.text.BaseColor.BLACK);
                Paragraph prgHeading = new Paragraph();
                prgHeading.Alignment = Element.ALIGN_LEFT;
                prgHeading.Add(new Chunk("Flight Ticket".ToUpper(), fntHead));
                doc.Add(prgHeading);

                Paragraph wlc = new Paragraph();
                //  BaseFont btnAuthor = BaseFont.CreateFont(iTextSharp.text.Font.FontFamily.TIMES_ROMAN, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                iTextSharp.text.Font fnttAuthor = new iTextSharp.text.Font(iTextSharp.text.Font.FontFamily.TIMES_ROMAN, 12, 2, iTextSharp.text.BaseColor.BLACK);
                wlc.Alignment = Element.ALIGN_LEFT;
                //prgGeneratedBY.Add(new Chunk("Report Generated by : ASPArticles", fntAuthor));  
                //prgGeneratedBY.Add(new Chunk("\nGenerated Date : " + DateTime.Now.ToShortDateString(), fntAuthor));
                wlc.Add(new Chunk("Hello,", fnttAuthor));

                doc.Add(new Chunk("\n", fntHead));

                //Adding paragraph for report generated by  
                Paragraph prgGeneratedBY = new Paragraph();
              //  BaseFont btnAuthor = BaseFont.CreateFont(iTextSharp.text.Font.FontFamily.TIMES_ROMAN, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                iTextSharp.text.Font fntAuthor = new iTextSharp.text.Font(iTextSharp.text.Font.FontFamily.TIMES_ROMAN, 12, 2, iTextSharp.text.BaseColor.BLACK);
                prgGeneratedBY.Alignment = Element.ALIGN_LEFT;
                //prgGeneratedBY.Add(new Chunk("Report Generated by : ASPArticles", fntAuthor));  
                //prgGeneratedBY.Add(new Chunk("\nGenerated Date : " + DateTime.Now.ToShortDateString(), fntAuthor));
                prgGeneratedBY.Add(new Chunk("Your ticket has confirmed, please find the below  PNR number and passenger details for reference.", fntAuthor));
                

                //Adding a line  
                Paragraph p = new Paragraph(new Chunk(new iTextSharp.text.pdf.draw.LineSeparator(0.0F, 100.0F, iTextSharp.text.BaseColor.BLACK, Element.ALIGN_LEFT, 1)));
                doc.Add(p);
                doc.Add(wlc);
                doc.Add(prgGeneratedBY);


                //Adding line break  
                doc.Add(new Chunk("\n", fntHead));


                Paragraph pnr = new Paragraph();
                BaseFont fntpr = BaseFont.CreateFont(BaseFont.TIMES_BOLD, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                iTextSharp.text.Font ftpnr = new iTextSharp.text.Font(fntpr, 13, 2, iTextSharp.text.BaseColor.BLACK);
                pnr.Alignment= Element.ALIGN_LEFT;
                pnr.Add(new Chunk("PNR: " + ticket.Pnrno, ftpnr));
                doc.Add(pnr);

                doc.Add(new Chunk("\n", fntHead));


                Paragraph doj = new Paragraph();
                BaseFont fndoj = BaseFont.CreateFont(BaseFont.TIMES_BOLD, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                iTextSharp.text.Font ftdoj = new iTextSharp.text.Font(fndoj, 13, 2, iTextSharp.text.BaseColor.BLACK);
                doj.Alignment = Element.ALIGN_LEFT;
                doj.Add(new Chunk("DateofJourney: " + ticket.Dateofjourney.ToShortDateString(), ftdoj));
                doc.Add(doj);

                doc.Add(new Chunk("\n", fntHead));

                Paragraph plc = new Paragraph();
                BaseFont fn1doj = BaseFont.CreateFont(BaseFont.TIMES_BOLD, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                iTextSharp.text.Font ft1doj = new iTextSharp.text.Font(fn1doj, 13, 2, iTextSharp.text.BaseColor.BLACK);
                plc.Alignment = Element.ALIGN_LEFT;
                plc.Add(new Chunk("From: " + flt.FromPlace +"            "+"To: " + flt.ToPlace, ft1doj));
                doc.Add(plc);

                doc.Add(new Chunk("\n", fntHead));

                Paragraph airln = new Paragraph();
                BaseFont fn2doj = BaseFont.CreateFont(BaseFont.TIMES_BOLD, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                iTextSharp.text.Font ft2doj = new iTextSharp.text.Font(fn2doj, 13, 2, iTextSharp.text.BaseColor.BLACK);
                airln.Alignment = Element.ALIGN_LEFT;
                airln.Add(new Chunk("Airline: " + air.Name + "            " + "Flightno: " + flt.Flightnumber, ft2doj));
                doc.Add(airln);

                doc.Add(new Chunk("\n", fntHead));

                Paragraph amnt = new Paragraph();
                BaseFont fn3doj = BaseFont.CreateFont(BaseFont.TIMES_BOLD, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                iTextSharp.text.Font ft3doj = new iTextSharp.text.Font(fn3doj, 13, 2, iTextSharp.text.BaseColor.BLACK);
                amnt.Alignment = Element.ALIGN_LEFT;
                amnt.Add(new Chunk("AmountPaided: " + ticket.amountpaided, ft3doj));
                doc.Add(amnt);

                doc.Add(new Chunk("\n", fntHead));

                //Adding  PdfPTable  
                PdfPTable table = new PdfPTable(ds.Columns.Count);
                table.WidthPercentage = 100;
                for (int i = 0; i < ds.Columns.Count; i++)
                {
                    string cellText = ds.Columns[i].ColumnName;
                    PdfPCell cell = new PdfPCell();
                    cell.Phrase = new Phrase(cellText, new iTextSharp.text.Font(iTextSharp.text.Font.FontFamily.TIMES_ROMAN, 10, 1));
                   // cell.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#C8C8C8"));
                    //cell.Phrase = new Phrase(cellText, new Font(Font.FontFamily.TIMES_ROMAN, 10, 1, new BaseColor(grdStudent.HeaderStyle.ForeColor)));  
                    //cell.BackgroundColor = new BaseColor(grdStudent.HeaderStyle.BackColor);  
                    cell.HorizontalAlignment = Element.ALIGN_CENTER;
                    cell.PaddingBottom = 5;
                    table.AddCell(cell);
                }

                //writing table Data  
                for (int i = 0; i < ds.Rows.Count; i++)
                {
                    for (int j = 0; j < ds.Columns.Count; j++)
                    {
                        table.AddCell(ds.Rows[i][j].ToString());
                    }
                }

                doc.Add(table);

                doc.Add(new Chunk("\n", fntHead));

                Paragraph imp = new Paragraph();
                //BaseFont fnimp = BaseFont.CreateFont(BaseFont.TIMES_BOLD, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                iTextSharp.text.Font ftimp = new iTextSharp.text.Font(iTextSharp.text.Font.FontFamily.TIMES_ROMAN, 11, 2, iTextSharp.text.BaseColor.RED);
                imp.Alignment = Element.ALIGN_LEFT;
                imp.Add(new Chunk("Important: It is compulsory for all passengers to wear face mask at the airport and throughout the journey inside the aircraft.", ftimp));
                doc.Add(imp);

                doc.Add(new Chunk("\n", fntHead));

                Paragraph end = new Paragraph();
                //BaseFont fnimp = BaseFont.CreateFont(BaseFont.TIMES_BOLD, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                iTextSharp.text.Font f1timp = new iTextSharp.text.Font(iTextSharp.text.Font.FontFamily.TIMES_ROMAN, 11, 2, iTextSharp.text.BaseColor.BLACK);
                end.Alignment = Element.ALIGN_CENTER;
                end.Add(new Chunk("******* Happy Journey *******", f1timp));
                doc.Add(end);

                doc.Close();
                //FileStream SourceStream = File.Open(filename, FileMode.Open);
                // return result;











                 result = "Booked Sucessfully";
            }
            
            catch (Exception e)
            {
                result = "Booking Failed";
            }
            return result;
        }

        public string ticketpdf(string id)
        {
            string result;
            try
            {
                var tck = _context.Tickets.Where(t => t.Pnrno == id).ToList();
                var res = _context.passengers.Where(t=>t.Pnrno ==id).ToList();
                var flt = _context.Flight.FirstOrDefault(f => f.Flightnumber == tck.FirstOrDefault().FlightId);
                var air = _context.Airline.FirstOrDefault(f => f.ID == tck.FirstOrDefault().AirlineId);
                // _context.SaveChanges();
                // var tk = ticket;



                //foreach (var psg in res)
                //{
                //    psg.Pnrno = tk.Pnrno;
                //    psg.datecreated = DateTime.Now;
                //    _context.passengers.Add(psg);
                //    _context.SaveChanges();
                //}
                string g = res.FirstOrDefault().dateofjourney.ToShortDateString();
                DataTable ds = new DataTable();
                ds.Columns.Add("Name");
                ds.Columns.Add("Age");
                ds.Columns.Add("Gender");
                ds.Columns.Add("Seat Class");
                ds.Columns.Add("Meal");
                ds.Columns.Add("SeatNo");
                foreach (var ps in res)
                {
                    ds.Rows.Add(new object[] { ps.name, ps.age, ps.Gender, ps.seattype, ps.Meal, ps.Seatno });
                }

                string filename = "C://Users//cogdotnet906//Downloads//" + res.FirstOrDefault().Pnrno + "_" + DateTime.Now.ToShortDateString() + "_" + DateTime.Now.Hour +
                    "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf";

                System.IO.MemoryStream ms = new System.IO.MemoryStream();
                iTextSharp.text.Rectangle rec = new iTextSharp.text.Rectangle(PageSize.A4);
                rec.BackgroundColor = new BaseColor(System.Drawing.Color.Olive);
                Document doc = new Document(rec);
                doc.SetPageSize(iTextSharp.text.PageSize.A4);
                PdfWriter writer = PdfWriter.GetInstance(doc, new FileStream(filename, FileMode.Create));
                doc.Open();

                //Creating paragraph for header  
                BaseFont bfntHead = BaseFont.CreateFont(BaseFont.TIMES_ROMAN, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                iTextSharp.text.Font fntHead = new iTextSharp.text.Font(bfntHead, 16, 1, iTextSharp.text.BaseColor.BLACK);
                Paragraph prgHeading = new Paragraph();
                prgHeading.Alignment = Element.ALIGN_LEFT;
                prgHeading.Add(new Chunk("Flight Ticket".ToUpper(), fntHead));
                doc.Add(prgHeading);

                Paragraph wlc = new Paragraph();
                //  BaseFont btnAuthor = BaseFont.CreateFont(iTextSharp.text.Font.FontFamily.TIMES_ROMAN, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                iTextSharp.text.Font fnttAuthor = new iTextSharp.text.Font(iTextSharp.text.Font.FontFamily.TIMES_ROMAN, 12, 2, iTextSharp.text.BaseColor.BLACK);
                wlc.Alignment = Element.ALIGN_LEFT;
                //prgGeneratedBY.Add(new Chunk("Report Generated by : ASPArticles", fntAuthor));  
                //prgGeneratedBY.Add(new Chunk("\nGenerated Date : " + DateTime.Now.ToShortDateString(), fntAuthor));
                wlc.Add(new Chunk("Hello,", fnttAuthor));

                doc.Add(new Chunk("\n", fntHead));

                //Adding paragraph for report generated by  
                Paragraph prgGeneratedBY = new Paragraph();
                //  BaseFont btnAuthor = BaseFont.CreateFont(iTextSharp.text.Font.FontFamily.TIMES_ROMAN, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                iTextSharp.text.Font fntAuthor = new iTextSharp.text.Font(iTextSharp.text.Font.FontFamily.TIMES_ROMAN, 12, 2, iTextSharp.text.BaseColor.BLACK);
                prgGeneratedBY.Alignment = Element.ALIGN_LEFT;
                //prgGeneratedBY.Add(new Chunk("Report Generated by : ASPArticles", fntAuthor));  
                //prgGeneratedBY.Add(new Chunk("\nGenerated Date : " + DateTime.Now.ToShortDateString(), fntAuthor));
                prgGeneratedBY.Add(new Chunk("Your ticket has confirmed, please find the below  PNR number and passenger details for reference.", fntAuthor));


                //Adding a line  
                Paragraph p = new Paragraph(new Chunk(new iTextSharp.text.pdf.draw.LineSeparator(0.0F, 100.0F, iTextSharp.text.BaseColor.BLACK, Element.ALIGN_LEFT, 1)));
                doc.Add(p);
                doc.Add(wlc);
                doc.Add(prgGeneratedBY);


                //Adding line break  
                doc.Add(new Chunk("\n", fntHead));


                Paragraph pnr = new Paragraph();
                BaseFont fntpr = BaseFont.CreateFont(BaseFont.TIMES_BOLD, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                iTextSharp.text.Font ftpnr = new iTextSharp.text.Font(fntpr, 13, 2, iTextSharp.text.BaseColor.BLACK);
                pnr.Alignment = Element.ALIGN_LEFT;
                pnr.Add(new Chunk("PNR: " + res.FirstOrDefault().Pnrno, ftpnr));
                doc.Add(pnr);

                doc.Add(new Chunk("\n", fntHead));


                Paragraph doj = new Paragraph();
                BaseFont fndoj = BaseFont.CreateFont(BaseFont.TIMES_BOLD, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                iTextSharp.text.Font ftdoj = new iTextSharp.text.Font(fndoj, 13, 2, iTextSharp.text.BaseColor.BLACK);
                doj.Alignment = Element.ALIGN_LEFT;
                doj.Add(new Chunk("DateofJourney: " + res.FirstOrDefault().dateofjourney.ToShortDateString(), ftdoj));
                doc.Add(doj);

                doc.Add(new Chunk("\n", fntHead));
                Paragraph plc = new Paragraph();
                BaseFont fn1doj = BaseFont.CreateFont(BaseFont.TIMES_BOLD, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                iTextSharp.text.Font ft1doj = new iTextSharp.text.Font(fn1doj, 13, 2, iTextSharp.text.BaseColor.BLACK);
                plc.Alignment = Element.ALIGN_LEFT;
                plc.Add(new Chunk("From: " + flt.FromPlace + "            " + "To: " + flt.ToPlace, ft1doj));
                doc.Add(plc);

                doc.Add(new Chunk("\n", fntHead));

                Paragraph airln = new Paragraph();
                BaseFont fn2doj = BaseFont.CreateFont(BaseFont.TIMES_BOLD, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                iTextSharp.text.Font ft2doj = new iTextSharp.text.Font(fn2doj, 13, 2, iTextSharp.text.BaseColor.BLACK);
                airln.Alignment = Element.ALIGN_LEFT;
                airln.Add(new Chunk("Airline: " + air.Name + "            " + "Flightno: " + flt.Flightnumber, ft2doj));
                doc.Add(airln);

                doc.Add(new Chunk("\n", fntHead));

                Paragraph amnt = new Paragraph();
                BaseFont fn3doj = BaseFont.CreateFont(BaseFont.TIMES_BOLD, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                iTextSharp.text.Font ft3doj = new iTextSharp.text.Font(fn3doj, 13, 2, iTextSharp.text.BaseColor.BLACK);
                amnt.Alignment = Element.ALIGN_LEFT;
                amnt.Add(new Chunk("AmountPaided: " + tck.FirstOrDefault().amountpaided, ft3doj));
                doc.Add(amnt);

                doc.Add(new Chunk("\n", fntHead));

                //Adding  PdfPTable  
                PdfPTable table = new PdfPTable(ds.Columns.Count);
                table.WidthPercentage = 100;
                for (int i = 0; i < ds.Columns.Count; i++)
                {
                    string cellText = ds.Columns[i].ColumnName;
                    PdfPCell cell = new PdfPCell();
                    cell.Phrase = new Phrase(cellText, new iTextSharp.text.Font(iTextSharp.text.Font.FontFamily.TIMES_ROMAN, 10, 1));
                    // cell.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#C8C8C8"));
                    //cell.Phrase = new Phrase(cellText, new Font(Font.FontFamily.TIMES_ROMAN, 10, 1, new BaseColor(grdStudent.HeaderStyle.ForeColor)));  
                    //cell.BackgroundColor = new BaseColor(grdStudent.HeaderStyle.BackColor);  
                    cell.HorizontalAlignment = Element.ALIGN_CENTER;
                    cell.PaddingBottom = 5;
                    table.AddCell(cell);
                }

                //writing table Data  
                for (int i = 0; i < ds.Rows.Count; i++)
                {
                    for (int j = 0; j < ds.Columns.Count; j++)
                    {
                        table.AddCell(ds.Rows[i][j].ToString());
                    }
                }

                doc.Add(table);

                doc.Add(new Chunk("\n", fntHead));

                Paragraph imp = new Paragraph();
                //BaseFont fnimp = BaseFont.CreateFont(BaseFont.TIMES_BOLD, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                iTextSharp.text.Font ftimp = new iTextSharp.text.Font(iTextSharp.text.Font.FontFamily.TIMES_ROMAN, 11, 2, iTextSharp.text.BaseColor.RED);
                imp.Alignment = Element.ALIGN_LEFT;
                imp.Add(new Chunk("Important: It is compulsory for all passengers to wear face mask at the airport and throughout the journey inside the aircraft.", ftimp));
                doc.Add(imp);


                doc.Add(new Chunk("\n", fntHead));

                Paragraph end = new Paragraph();
                //BaseFont fnimp = BaseFont.CreateFont(BaseFont.TIMES_BOLD, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                iTextSharp.text.Font f1timp = new iTextSharp.text.Font(iTextSharp.text.Font.FontFamily.TIMES_ROMAN, 11, 2, iTextSharp.text.BaseColor.BLACK);
                end.Alignment = Element.ALIGN_CENTER;
                end.Add(new Chunk("******* Happy Journey *******", f1timp));
                doc.Add(end);

                doc.Close();

                doc.Close();
                //File.Open(filename,FileMode.Open);
                //FileStream SourceStream = File.Open(filename, FileMode.Open);
                // return result;


                System.Diagnostics.Process.Start(filename);
                //string FilePath = Server.MapPath("javascript1-sample.pdf");
                //WebClient User = new WebClient();
                //Byte[] FileBuffer = User.DownloadData(FilePath);
                //if (FileBuffer != null)
                //{
                //    Response.ContentType = "application/pdf";
                //    Response.AddHeader("content-length", FileBuffer.Length.ToString());
                //    Response.BinaryWrite(FileBuffer);
                //}







                result = "Booked Sucessfully";
            }

            catch (Exception e)
            {
                result = "Booking Failed";
            }
            return result;
        }
        //Cancel Ticket
        public string CancelTicket(string Pnrno)
        {
            string result;
            try
            {
                var res = _context.Tickets.FirstOrDefault(a => a.Pnrno == Pnrno);
                

                if (res != null && res.Dateofjourney != DateTime.Now)
                {
                    res.Removed = true;
                    res.TicketcancelledDate = DateTime.Now;
                    _context.Tickets.Update(res);
                    _context.SaveChanges();
                    result = "Cancelled Sucessfully!!";
                    string msg = res.FlightId.ToString() + ","+ res.BookedSeats.ToString()+"," +res.Seattype + ","+ "cancel";
                    Rabbitmqcancelprducrcs rab = new Rabbitmqcancelprducrcs();
                    rab.rabirprd(msg);
                }
                else if(res!=null && res.DateCreated != DateTime.Now)
                {
                    result = "Sorry, you have to cancel the ticket a day before";
                }
                else
                {
                    result = "Ticket not found, please verify the PNR number";
                }
            }
            catch (Exception e)
            {
                result = "Update Failed";
            }
            return result;
        }
    }
}
